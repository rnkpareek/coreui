{"version":3,"file":"layout.directive.js","sourceRoot":"","sources":["../../../src/shared/layout/layout.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, HostListener, Input, ElementRef, OnInit } from '@angular/core';\nimport { sidebarCssClasses, asideMenuCssClasses } from './../classes';\nimport { ToggleClasses } from './../toggle-classes';\n\n/**\n* Allows the sidebar to be toggled via click.\n*/\n@Directive({\n  selector: '[appSidebarToggler]'\n})\nexport class SidebarToggleDirective implements OnInit {\n  @Input('appSidebarToggler') breakpoint: string;\n  public bp;\n  constructor() {}\n  ngOnInit(): void {\n    this.bp = this.breakpoint;\n  }\n  @HostListener('click', ['$event'])\n  toggleOpen($event: any) {\n    $event.preventDefault();\n    let cssClass;\n    this.bp ? cssClass = `sidebar-${this.bp}-show` : cssClass = sidebarCssClasses[0];\n    ToggleClasses(cssClass, sidebarCssClasses);\n  }\n}\n\n@Directive({\n  selector: '[appSidebarMinimizer]'\n})\nexport class SidebarMinimizeDirective {\n  constructor() { }\n\n  @HostListener('click', ['$event'])\n  toggleOpen($event: any) {\n    $event.preventDefault();\n    document.querySelector('body').classList.toggle('sidebar-minimized');\n  }\n}\n\n@Directive({\n  selector: '[appMobileSidebarToggler]'\n})\nexport class MobileSidebarToggleDirective {\n  constructor() { }\n\n  // Check if element has class\n  private hasClass(target: any, elementClassName: string) {\n    return new RegExp('(\\\\s|^)' + elementClassName + '(\\\\s|$)').test(target.className);\n  }\n\n  @HostListener('click', ['$event'])\n  toggleOpen($event: any) {\n    $event.preventDefault();\n    document.querySelector('body').classList.toggle('sidebar-mobile-show');\n  }\n}\n\n/**\n* Allows the off-canvas sidebar to be closed via click.\n*/\n@Directive({\n  selector: '[appSidebarClose]'\n})\nexport class SidebarOffCanvasCloseDirective {\n  constructor() { }\n\n  // Check if element has class\n  private hasClass(target: any, elementClassName: string) {\n    return new RegExp('(\\\\s|^)' + elementClassName + '(\\\\s|$)').test(target.className);\n  }\n\n  // Toggle element class\n  private toggleClass(elem: any, elementClassName: string) {\n    let newClass = ' ' + elem.className.replace( /[\\t\\r\\n]/g, ' ' ) + ' ';\n    if (this.hasClass(elem, elementClassName)) {\n      while (newClass.indexOf(' ' + elementClassName + ' ') >= 0 ) {\n        newClass = newClass.replace( ' ' + elementClassName + ' ' , ' ' );\n      }\n      elem.className = newClass.replace(/^\\s+|\\s+$/g, '');\n    } else {\n      elem.className += ' ' + elementClassName;\n    }\n  }\n\n  @HostListener('click', ['$event'])\n  toggleOpen($event: any) {\n    $event.preventDefault();\n\n    if (this.hasClass(document.querySelector('body'), 'sidebar-off-canvas')) {\n      this.toggleClass(document.querySelector('body'), 'sidebar-opened');\n    }\n  }\n}\n\n@Directive({\n  selector: '[appBrandMinimizer]'\n})\nexport class BrandMinimizeDirective {\n  constructor() { }\n\n  @HostListener('click', ['$event'])\n  toggleOpen($event: any) {\n    $event.preventDefault();\n    document.querySelector('body').classList.toggle('brand-minimized');\n  }\n}\n\n\n/**\n* Allows the aside to be toggled via click.\n*/\n@Directive({\n  selector: '[appAsideMenuToggler]',\n})\nexport class AsideToggleDirective implements OnInit {\n  @Input('appAsideMenuToggler') breakpoint: string;\n  public bp;\n  constructor() {}\n  ngOnInit(): void {\n    this.bp = this.breakpoint;\n  }\n  @HostListener('click', ['$event'])\n  toggleOpen($event: any) {\n    $event.preventDefault();\n    let cssClass;\n    this.bp ? cssClass = `aside-menu-${this.bp}-show` : cssClass = asideMenuCssClasses[0];\n    ToggleClasses(cssClass, asideMenuCssClasses);\n  }\n}\n"]}